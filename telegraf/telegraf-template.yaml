kind: Template
apiVersion: v1
template: telegraf
metadata:
  name: telegraf
labels:
  app: tick

parameters:
- name: APP_IMAGE
  description: Name of the telegraf image
  value: telegraf:1.5.3-alpine
- name: APP_NAME
  description: master name used as a service name and a selector
  value: telegraf
objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APP_NAME}
  labels:
    app: tick
  spec:
    strategy:
      type: Rolling
    triggers:
      - type: ConfigChange
    replicas: 1
    selector:
      name: ${APP_NAME}
    template:
      metadata:
        labels:
          name: ${APP_NAME}
      spec:
        containers:
        - name: ${APP_NAME}
          image: ${APP_IMAGE}
          ports:
          - name: udp
            protocol: UDP
            containerPort: 8092
          - name: http
            containerPort: 8186
          volumeMounts:
          - name: config
            mountPath: /etc/telegraf
          resources:
            requests:
              cpu: 50m
              memory: 500Mi
            limits:
              cpu: 500m
              memory: 500Mi
        volumes:
        - name: config
          configMap:
            name: telegraf-config
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: telegraf-config
  data:
    telegraf.conf: |+
      # Telegraf Configuration
      # Global tags can be specified here in key="value" format.
      [global_tags]
      # Configuration for telegraf agent
      [agent]
      ## Default data collection interval for all inputs
      interval = "10s"  
      ## Rounds collection interval to 'interval'
      round_interval = true  
      ## This controls the size of writes that Telegraf sends to output plugins.
      metric_batch_size = 1000  
      ## This buffer only fills when writes fail to output plugin(s).
      metric_buffer_limit = 10000  
      ## Collection jitter is used to jitter the collection by a random amount.
      collection_jitter = "0s"  
      flush_interval = "10s"  
      flush_jitter = "0s"  
      precision = ""

      ## Logging configuration:
      debug = false  
      ## Run telegraf in quiet mode (error log messages only).
      quiet = false  
      ## Specify the log file name. The empty string means to log to stderr.
      logfile = ""  
      ## Override default hostname, if empty use os.Hostname()
      hostname = ""  
      ## If set to true, do no set the "host" tag in the telegraf agent.
      omit_hostname = false


      ###############################################################################
      #                            OUTPUT PLUGINS                                                                              #
      ###############################################################################

      # Configuration for influxdb server to send metrics to
      [[outputs.influxdb]]
      ## The full HTTP or UDP URL for your InfluxDB instance.
      urls = ["http://influxdb-svc.tick.svc.cluster.local:8086"]    # required  
      ## The target database for metrics (telegraf will create it if not exists).
      database = "telegraf" # required

      ## Name of existing retention policy to write to.  Empty string writes to
      ## the default retention policy.
      retention_policy = ""  
      ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
      write_consistency = "any"

      ## Write timeout (for the InfluxDB client), formatted as a string.
      timeout = "5s"
      ###############################################################################
      #                            INPUT  PLUGINS                                                                                 #
      ###############################################################################
    
      [[inputs.jolokia2_agent]]
        urls = ["http://cad-service.dev.svc.cluster.local:8778/jolokia"]
        name_prefix = "cad."

        ### JVM Generic

        [[inputs.jolokia2_agent.metric]]
          name  = "OperatingSystem"
          mbean = "java.lang:type=OperatingSystem"
          paths = ["ProcessCpuLoad","SystemLoadAverage","SystemCpuLoad"]

        [[inputs.jolokia2_agent.metric]]
          name  = "jvm_runtime"
          mbean = "java.lang:type=Runtime"
          paths = ["Uptime"]

        [[inputs.jolokia2_agent.metric]]
          name  = "jvm_memory"
          mbean = "java.lang:type=Memory"
          paths = ["HeapMemoryUsage", "NonHeapMemoryUsage", "ObjectPendingFinalizationCount"]

        [[inputs.jolokia2_agent.metric]]
          name     = "jvm_garbage_collector"
          mbean    = "java.lang:name=*,type=GarbageCollector"
          paths    = ["CollectionTime", "CollectionCount"]
          tag_keys = ["name"]

        [[inputs.jolokia2_agent.metric]]
          name       = "jvm_memory_pool"
          mbean      = "java.lang:name=*,type=MemoryPool"
          paths      = ["Usage", "PeakUsage", "CollectionUsage"]
          tag_keys   = ["name"]
          tag_prefix = "pool_"

        ### TOMCAT

        [[inputs.jolokia2_agent.metric]]
          name     = "GlobalRequestProcessor"
          mbean    = "Catalina:name=*,type=GlobalRequestProcessor"
          paths    = ["requestCount","bytesReceived","bytesSent","processingTime","errorCount"]
          tag_keys = ["name"]

        [[inputs.jolokia2_agent.metric]]
          name     = "JspMonitor"
          mbean    = "Catalina:J2EEApplication=*,J2EEServer=*,WebModule=*,name=jsp,type=JspMonitor"
          paths    = ["jspReloadCount","jspCount","jspUnloadCount"]
          tag_keys = ["J2EEApplication","J2EEServer","WebModule"]

        [[inputs.jolokia2_agent.metric]]
          name     = "ThreadPool"
          mbean    = "Catalina:name=*,type=ThreadPool"
          paths    = ["maxThreads","currentThreadCount","currentThreadsBusy"]
          tag_keys = ["name"]

        [[inputs.jolokia2_agent.metric]]
          name     = "Servlet"
          mbean    = "Catalina:J2EEApplication=*,J2EEServer=*,WebModule=*,j2eeType=Servlet,name=*"
          paths    = ["processingTime","errorCount","requestCount"]
          tag_keys = ["name","J2EEApplication","J2EEServer","WebModule"]

        [[inputs.jolokia2_agent.metric]]
          name     = "Cache"
          mbean    = "Catalina:context=*,host=*,name=Cache,type=WebResourceRoot"
          paths    = ["hitCount","lookupCount"]
          tag_keys = ["context","host"]